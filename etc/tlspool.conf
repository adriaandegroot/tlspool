# tlspool.conf - Configuration of the TLS pool
#
# Lines in this file may only hold one of the following forms:
#  - nothing: ignored
#  - only whitespace: ignored
#  - a # sign and arbitrary characters: ignored
#  - a word, a single space and arbitrary characters: a config declaration
#
# The order of declarations matter; if options are undeclared or appear out
# of their expected order they may lead to a syntax error.
#

#
# The TLS pool is a daemon.  Set its PID file here, to be used in scripts.
#
daemon_pidfile /var/run/tlspool.pid

#
# The TLS pool listens to a UNIX domain socket, reachable to users and groups
# with the proper permissions.  Use mode 0660 to permit same-user and
# same-group access to the TLS pool.
#
# Note that initial root privileges are needed to be able to change to
# another socket_user and possibly to change the socket_group.  These
# actions are performed before dropping privileges.
#
# Multiple of these may be specified.  They are instantiated at the point
# of the socket_name declaration.  This serves the purpose of a simple
# 
#
socket_user tlspool
socket_group tlspool
socket_mode 0660
socket_name /var/run/tlspool.sock

#
# The TLS pool usually drops privileges to a lower-ordered user, as
# specified below.  Note that the PKCS #11 interface is a library,
# so it may suffer from a chroot if it operates on locally stored
# data that is not available under the chroot environment.
#
daemon_user tlspool
daemon_group tlspool
daemon_chroot /var/chroot/tlspool

#
# The TLS pool is an application layer over PKCS #11.  Configure which
# PKCS #11 implementation library is used to store certificates and keys.
#
# Select the storage profile to be used for OpenPGP keys; they should
# either be stored as a Vendor Certificate Format 0x80504750 or as a
# binary object.
#
# It is possible to specify multiple PCKS #11 library paths.  These will
# then be added in order.  Note that any configured PIN will be
# removed by the PKCS #11 library path declaration.
#
# The pkcs11_token looks for a named token under the last entered library
# path.  If a pkcs11_pin was previously setup and no pkcs11_path or
# pkcs11_token declaration came along since then, then the PIN will be
# used to access the pkcs11_token without further need to manually
# login to the token.
#
# When no pkcs11_pin is available to a PKCS #11 token, it must be
# submitted to a running TLS pool daemon by running tlspool a second
# time, with the -p option.  This action will make it iterate over
# all tokens that failed to login yet, and present a PIN request for
# each of them.  When all tokens have successfully logged in, then
# no PIN is requested and the program will terminate immediately.
#
pkcs11_path /usr/lib/my/pkcs11.so
pkcs11_pin sekreet
pkcs11_token MySecureKeyStore

#
# The TLS pool uses a local LDAP proxy which resolves distinguishedNames
# ending in dc ,dc to remote LDAP servers.  It should also store or find
# local public information, such as OpenPGP keys and X.509 certificates.
#
# OpenPGP requires non-standard definitions, see
# http://rickywiki.vanrein.org/doku.php?id=globaldir-5-openpgp
#
ldap_proxy ldap://[2001:db8::389:1] ldap://[2001:db8::389:2]

#
# The TLS pool can use memcache as a storage facility for authentication
# and authorization results.  It can be setup with an expiration time as
# is desirable; note that local programs have the ability to bypass the
# cache, so as to ensure tight authentication for the most critical tasks.
#
memcache_pool [2001:db8::8000:6] [2001:db::8000:7]
memcache_ttl 3600

#
# At the expensive of two nested negotiations, it is possible to serve the
# privacy of the connecting parties.  This is possibly when the client
# offers to accept DH-based anonymous service, and when the server welcomes
# it too.  They should also both implement secure re-negotiations.  We
# introduce a new requirement that the program should not continue in that
# mode, but immediately enforce renegotiation of the security parameters.
#
# Note that the conditions can be said to implement a form of opportunistic,
# that is no-guarantees-provided scheme of concealing certificate identities
# from passive observers.  The normal usage mode of TLS simply does not
# work like that.
#
privacy_attempt no

#
# Finally, the ACL is used to define which application may access what
# certificates and keys.  This is useful to avoid too generic access to
# service keys, although it would be exceptional when needed.
#
# The format of an ACL rule is <identity> <who>... where the <identity>
# is either a domain or user@domain and the <who> elements are the
# program paths that may use the keys that implement certificates that
# are named <identity>.
#
# TODO: Is the ACL properly replaced by having multiple UNIX sockets?


