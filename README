TLSPOOL README
==============

The tlspool package concentrates TLS-use by client and server applications.
It gets passed a file descriptor of a socket, initiates TLS over it, and
then passes back a new, TLS-protected socket to the originator.  This makes
it very straightforward to add TLS support to network software, and the
central location of the TLS pool makes it easy to enforce consistent rules
for authentication and authorization rules.


Current Status
--------------

Currently, this work is in a proof-of-concept state, and programmed in
Python.  This has been the work of a couple of students who wrote in Python,
and it should be seen as a first demonstration of the idea of a TLS pool.
It is not at production level, documentation is rather limited, but it
may be used for demonstration purposes.

Note that this early TLS daemon uses the major concept, namely that of
file descriptor exchange between application and TLS pool, but the rest
of the API has not been explicitly designed; expect this specific API
to change.

Also note that the DANE implementation only works for the publication of
hashes of certificates, not for its other forms.  This means that the
code is only usable in situations where the remote party can be trusted
to implement this sort of thing.


Full-blown daemon development
-----------------------------

This daemon design is part of the plans of the Network Effect Alliance,
which aims to improve everyone's Internet quality through distribution of
more protocols and facilities under privately owned domain names.  The
full stretch of this project is documented on the website,
http://www.networkeffectalliance.org

Future developments will provide include/library files that offer simple
calls fd=starttls_client(fd,...) and fd=starttls_server(fd,...) to
accommodate the switch from unencrypted traffic to TLS-encrypted traffic.
Protocol support for TCP, UDP and SCTP over IPv4 or IPv6 will be provided.

The daemon will provide configurable hooks for authorization; this can
then be setup for the entire system at once.  The resulting information
of both authentication and authorization will be shared using memcached,
to simplify sharing of outcome not just accross time and between protocols,
but also between different servers.  The design goal of memcached is to
avoid repeated checks and repeated access to remotely stored information,
until a certain caching time has passed.

CURRENT STATUS: The daemon starts, parses configuration directives and
processes most of them.  There is no actual service yet, just a loop that
makes the tool infinitely sleepy.


The importance of PKCS #11
--------------------------

The key material used by this daemon will be accessed over PKCS #11.  This
requires multi-layered attacks to key material: the material is protected
by a secure key store of choice, in hardware or software, and even the PIN
for using the private keys without seeing them is stored in a separate
program, namely the TLS pool.  Specifically, the PIN and key material are
not available to user agents such as a PHP-enabled web server which may
be running outdated software.

Aside from the improved key protection and the ability to choose a security
level by choosing the PKCS #11 implementation accordingly, it is useful to
have a central location for key storage; this simplifies maintenance tasks,
such as certificate renewals and (PIN encrypted) secret key backup.

One last advantage of using PKCS #11 is that this enables a form where
USB token manufacturers can provide a tool that functions as a HTTP proxy,
and that establishes secure connections to selected parties with an OpenPGP
key and no further infrastructure.  End users can plugin their token to
get secured access, and remove it to stop further secure web connections.
Note that this principle can easily be extended to other protocols that
can work through a proxy.

Note that it is expressly not the task of the TLS pool to manage the
objects stored behind the PKCS #11 API.  This is expressly left to
external tools that manage certificates and keys on behalf of the
application area covered.  All the TLS pool does is read tokens, looking
for usable keys to authenticate its identities to the Internet, both over
X.509 and over OpenPGP.


Additional Rules: RADIUS
------------------------

TODO: Perhaps prefer TACACS+?
TODO: Are authn and authz indeed separated?  And is this desirable?
TODO: Can RADIUS handle user@domain for both the user and the realm?

Local environments may have their own added requirements to authentication,
authorization and also pursue their own accounting of TLS connections.  The
common approach to these mechansims is RADIUS, which can independently
handle these three types of request.  RADIUS is designed as a fast local
protocol, and it can be rerouted with FreeRADIUS and resolved with scripts
or programs in just about any programming language.

Any AAA facilities are stacked on top of the minimum requirements offered
by the TLS pool, that is the identities of the peers can be assumed to
have been established (or perhaps be established in parallel) while the
authentication and authorization is requested.  Note that accounting
will always wait for completion of the identity check, to avoid charging
to an innocent account.

Accounting is not usually applied immediately though.  It may be flagged
when the TLS pool is requested to setup TLS over a connection, but it may
also be requested separately at some later time.


